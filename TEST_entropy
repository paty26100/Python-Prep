{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOIbEU+CAinVs/NCWK0AQAy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/paty26100/Python-Prep/blob/main/TEST_entropy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "metadata": {
        "id": "sTzakDjEhU0u"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "media1 = pd.read_csv('media1.csv')\n",
        "media2 = pd.read_csv('media2.csv')\n",
        "media3 = pd.read_csv('media3.csv')\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "Q7TO7LDNsCmg"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(media1.head())\n",
        "print(media2.head())\n",
        "print(media3.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KbUcZ_V_sCqx",
        "outputId": "57e2814a-f5fc-49f0-86d3-80b0a7b7d025"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "       date  spend   sales\n",
            "0  9/1/2022  95113  165879\n",
            "1  9/2/2022  78221  455400\n",
            "2  9/3/2022  78675  302078\n",
            "3  9/4/2022  96216  477936\n",
            "4  9/5/2022  89380  376129\n",
            "       date  spend   sales\n",
            "0  9/1/2022   4766   47180\n",
            "1  9/2/2022  57074  474906\n",
            "2  9/3/2022  68243  810025\n",
            "3  9/4/2022  62328  973233\n",
            "4  9/5/2022  67986  355518\n",
            "       date     spend    sales\n",
            "0  9/1/2022   98750.0  16364.0\n",
            "1  9/2/2022   96036.0  54098.0\n",
            "2  9/3/2022   97081.0  79785.0\n",
            "3  9/4/2022  101364.0  58293.0\n",
            "4  9/5/2022   84307.0  44292.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "media1.dropna(inplace=True)\n",
        "media2.dropna(inplace=True)\n",
        "media3.dropna(inplace=True)\n"
      ],
      "metadata": {
        "id": "ZFHvTf9OsCsp"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "media1['date'] = pd.to_datetime(media1['date'])\n",
        "media2['date'] = pd.to_datetime(media2['date'])\n",
        "media3['date'] = pd.to_datetime(media3['date'])"
      ],
      "metadata": {
        "id": "0tJWhcN51ycc"
      },
      "execution_count": 80,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "media1['year'] = media1['date'].dt.year\n",
        "media1['month'] = media1['date'].dt.month\n",
        "media1['day'] = media1['date'].dt.day\n",
        "\n",
        "media2['year'] = media2['date'].dt.year\n",
        "media2['month'] = media2['date'].dt.month\n",
        "media2['day'] = media2['date'].dt.day\n",
        "\n",
        "media3['year'] = media3['date'].dt.year\n",
        "media3['month'] = media3['date'].dt.month\n",
        "media3['day'] = media3['date'].dt.day\n"
      ],
      "metadata": {
        "id": "-dQ9PRUf10gt"
      },
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "media1['sales'] = media1['sales'].astype(int)\n",
        "media2['sales'] = media2['sales'].astype(int)\n",
        "media3['sales'] = media3['sales'].astype(int)\n",
        "\n"
      ],
      "metadata": {
        "id": "XesoB1U9satv"
      },
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Cvp3fDj2t8xx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n"
      ],
      "metadata": {
        "id": "mVk2KAhStz0Z"
      },
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = MinMaxScaler()\n",
        "media1['sales_normalizada'] = scaler.fit_transform(media1[['sales']])\n",
        "media2['sales2_normalizada'] = scaler.fit_transform(media2[['sales']])\n",
        "media3['sales_normalizada'] = scaler.fit_transform(media3[['sales']])\n"
      ],
      "metadata": {
        "id": "c4F11HXysav-"
      },
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(media1.describe())\n",
        "print(media2.describe())\n",
        "print(media3.describe())\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sjt-MKw-sayj",
        "outputId": "c2960fde-712e-4098-eabc-6585628b2f11"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                      date         spend         sales         year  \\\n",
            "count                  365  3.650000e+02  3.650000e+02   365.000000   \n",
            "mean   2023-03-02 00:00:00  1.354001e+05  5.540612e+05  2022.665753   \n",
            "min    2022-09-01 00:00:00  2.531100e+04  3.033800e+04  2022.000000   \n",
            "25%    2022-12-01 00:00:00  7.822100e+04  2.992480e+05  2022.000000   \n",
            "50%    2023-03-02 00:00:00  1.096220e+05  4.286830e+05  2023.000000   \n",
            "75%    2023-06-01 00:00:00  1.346630e+05  6.439380e+05  2023.000000   \n",
            "max    2023-08-31 00:00:00  1.282137e+06  8.113771e+06  2023.000000   \n",
            "std                    NaN  1.343441e+05  6.047974e+05     0.472374   \n",
            "\n",
            "            month         day  sales_normalizada  \n",
            "count  365.000000  365.000000         365.000000  \n",
            "mean     6.526027   15.720548           0.064790  \n",
            "min      1.000000    1.000000           0.000000  \n",
            "25%      4.000000    8.000000           0.033267  \n",
            "50%      7.000000   16.000000           0.049279  \n",
            "75%     10.000000   23.000000           0.075908  \n",
            "max     12.000000   31.000000           1.000000  \n",
            "std      3.452584    8.808321           0.074819  \n",
            "                      date         spend         sales         year  \\\n",
            "count                  365  3.650000e+02  3.650000e+02   365.000000   \n",
            "mean   2023-03-02 00:00:00  1.082506e+05  5.572348e+05  2022.665753   \n",
            "min    2022-09-01 00:00:00  4.766000e+03  2.463200e+04  2022.000000   \n",
            "25%    2022-12-01 00:00:00  5.297400e+04  2.405410e+05  2022.000000   \n",
            "50%    2023-03-02 00:00:00  6.359400e+04  3.947770e+05  2023.000000   \n",
            "75%    2023-06-01 00:00:00  1.207200e+05  6.068370e+05  2023.000000   \n",
            "max    2023-08-31 00:00:00  1.535748e+06  1.035582e+07  2023.000000   \n",
            "std                    NaN  1.494583e+05  8.547647e+05     0.472374   \n",
            "\n",
            "            month         day  sales2_normalizada  \n",
            "count  365.000000  365.000000          365.000000  \n",
            "mean     6.526027   15.720548            0.051553  \n",
            "min      1.000000    1.000000            0.000000  \n",
            "25%      4.000000    8.000000            0.020899  \n",
            "50%      7.000000   16.000000            0.035828  \n",
            "75%     10.000000   23.000000            0.056354  \n",
            "max     12.000000   31.000000            1.000000  \n",
            "std      3.452584    8.808321            0.082736  \n",
            "                                date         spend         sales         year  \\\n",
            "count                            339  3.390000e+02  3.390000e+02   339.000000   \n",
            "mean   2023-03-07 17:20:42.477876224  7.174114e+04  2.215417e+05  2022.663717   \n",
            "min              2022-09-01 00:00:00  2.467000e+03  1.073300e+04  2022.000000   \n",
            "25%              2022-12-02 12:00:00  2.514950e+04  1.042080e+05  2022.000000   \n",
            "50%              2023-03-15 00:00:00  4.521600e+04  1.806290e+05  2023.000000   \n",
            "75%              2023-06-07 12:00:00  8.315800e+04  2.717585e+05  2023.000000   \n",
            "max              2023-08-31 00:00:00  1.457236e+06  1.785301e+06  2023.000000   \n",
            "std                              NaN  1.230160e+05  1.909694e+05     0.473135   \n",
            "\n",
            "            month         day  sales_normalizada  \n",
            "count  339.000000  339.000000         339.000000  \n",
            "mean     6.755162   15.265487           0.118794  \n",
            "min      1.000000    1.000000           0.000000  \n",
            "25%      4.000000    8.000000           0.052675  \n",
            "50%      7.000000   15.000000           0.095739  \n",
            "75%     10.000000   23.000000           0.147092  \n",
            "max     12.000000   31.000000           1.000000  \n",
            "std      3.326725    8.840484           0.107615  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(media1['sales'], bins=20)\n",
        "plt.xlabel('Variable')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.title('Distribución de la variable')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "dcn3jRlXsa0_",
        "outputId": "b7017f9a-25c6-4f6f-d971-81d12b0bdc95"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression"
      ],
      "metadata": {
        "id": "fNmoI8Visa3R"
      },
      "execution_count": 88,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(media1[['date', 'spend']], media1['sales'], test_size=0.2, random_state=42)\n",
        "X_train2, X_test2, y_train2, y_test2 = train_test_split(media2[['date', 'spend']], media2['sales'], test_size=0.2, random_state=42)\n",
        "X_train3, X_test3, y_train3, y_test3 = train_test_split(media3[['date', 'spend']], media3['sales'], test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "k0khP1SlxSZ3"
      },
      "execution_count": 89,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "model = LinearRegression()\n",
        "mode2 = LinearRegression()\n",
        "mode3 = LinearRegression()\n"
      ],
      "metadata": {
        "id": "ObSkYCOWxSbB"
      },
      "execution_count": 94,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(media1.head())\n",
        "print(media2.head())\n",
        "print(media3.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WKPsCVLU0gTH",
        "outputId": "eec317a2-379b-47bc-9e09-a76922182319"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        date  spend   sales  year  month  day  sales_normalizada\n",
            "0 2022-09-01  95113  165879  2022      9    1           0.016768\n",
            "1 2022-09-02  78221  455400  2022      9    2           0.052584\n",
            "2 2022-09-03  78675  302078  2022      9    3           0.033617\n",
            "3 2022-09-04  96216  477936  2022      9    4           0.055372\n",
            "4 2022-09-05  89380  376129  2022      9    5           0.042778\n",
            "        date  spend   sales  year  month  day  sales2_normalizada\n",
            "0 2022-09-01   4766   47180  2022      9    1            0.002183\n",
            "1 2022-09-02  57074  474906  2022      9    2            0.043584\n",
            "2 2022-09-03  68243  810025  2022      9    3            0.076022\n",
            "3 2022-09-04  62328  973233  2022      9    4            0.091819\n",
            "4 2022-09-05  67986  355518  2022      9    5            0.032028\n",
            "        date     spend  sales  year  month  day  sales_normalizada\n",
            "0 2022-09-01   98750.0  16364  2022      9    1           0.003173\n",
            "1 2022-09-02   96036.0  54098  2022      9    2           0.024437\n",
            "2 2022-09-03   97081.0  79785  2022      9    3           0.038912\n",
            "3 2022-09-04  101364.0  58293  2022      9    4           0.026801\n",
            "4 2022-09-05   84307.0  44292  2022      9    5           0.018911\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(media1[['year', 'month', 'day']], media1['sales'], test_size=0.2, random_state=42)\n",
        "X_train, X_test, y_train, y_test = train_test_split(media2[['year', 'month', 'day']], media2['sales'], test_size=0.2, random_state=42)\n",
        "X_train, X_test, y_train, y_test = train_test_split(media3[['year', 'month', 'day']], media3['sales'], test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "NbpMXNfG0gV-"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = LinearRegression()\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "model2 = LinearRegression()\n",
        "model2.fit(X_train, y_train)\n",
        "\n",
        "model3 = LinearRegression()\n",
        "model3.fit(X_train, y_train)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "9nsZZCbI0gX9",
        "outputId": "248bf4c5-e2d9-448f-be13-9fdebee82785"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(model.score(X_test, y_test))\n",
        "print(model2.score(X_test, y_test))\n",
        "print(model3.score(X_test, y_test))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "grsuaAv23T-G",
        "outputId": "863d7d05-b1d6-4dfe-eb12-e899c4b2e7a0"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.036140923179166284\n",
            "0.036140923179166284\n",
            "0.036140923179166284\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = model.predict(X_test)\n",
        "predictions = mode2.predict(X_test)\n",
        "predictions = mode3.predict(X_test)\n"
      ],
      "metadata": {
        "id": "7nCGfNld6ncf"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "8NWFRWll6nlI"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "canales = ['media1', 'media2', 'media3']"
      ],
      "metadata": {
        "id": "kCoPkNcn7RUN"
      },
      "execution_count": 115,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def asignar_presupuesto(predictions, canales, presupuesto_total):\n",
        "    probabilidades = predictions / predictions.sum()\n",
        "\n",
        "    presupuesto_asignado = probabilidades * presupuesto_total\n",
        "\n",
        "    return presupuesto_asignado\n",
        "\n"
      ],
      "metadata": {
        "id": "kQ6RITOA7RXu"
      },
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "presupuesto_total = 1000\n",
        "presupuesto_asignado = asignar_presupuesto(predictions, canales, presupuesto_total)\n"
      ],
      "metadata": {
        "id": "M2TxwAOq7Rb5"
      },
      "execution_count": 128,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Canales:\", canales)\n",
        "print(\"Presupuesto Asignado:\", presupuesto_asignado)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2sJbDWwA8qfk",
        "outputId": "c572a94b-5e29-42dd-cd63-4d7c737c6b7f"
      },
      "execution_count": 130,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Canales: ['media1', 'media2', 'media3']\n",
            "Presupuesto Asignado: [18.38187736  6.2201515  17.488737   12.46032969  7.8573093  15.45838722\n",
            " 12.88571661 17.6802383  22.7671185  10.47235236  7.27261009 14.28898879\n",
            " 17.27095182 11.07315201 17.02097763 11.83325803  6.45403118 21.48078023\n",
            " 17.85565103  9.24448698 17.91411799 12.28491696 11.01467912  6.57097103\n",
            "  9.78681374 14.79912062 16.90403779 14.58134137  9.20211453 20.19444196\n",
            " 12.3010174  12.10951016 16.43627842 20.42832165 14.97453335  8.77672761\n",
            " 20.25291485 21.9485396  17.13791748 14.74065366 14.09748156  8.54284792\n",
            " 10.07916038 15.10756769 12.92808906 20.3113818  18.61575705 19.78515548\n",
            " 14.38983413 11.40787111 20.77914117 13.00265645 13.76276247 15.44229272\n",
            " 13.2204357  13.06112341 12.51879665 22.18241929 22.53323882 12.81114922\n",
            " 20.83761406 20.95455391 20.54526149 11.95019787 14.34746168 14.27289429\n",
            " 14.62371382 10.06306588]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "-kAQPuML8qiL"
      },
      "execution_count": 131,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "canales = ['media1', 'media2', 'media3']\n",
        "presupuesto_asignado = [18.38, 6.22, 17.49]"
      ],
      "metadata": {
        "id": "40-1qAJo8qkr"
      },
      "execution_count": 133,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "plt.bar(canales, presupuesto_asignado, color='skyblue')\n",
        "plt.xlabel('Canales')\n",
        "plt.ylabel('Presupuesto Asignado')\n",
        "plt.title('Asignación de Presupuesto entre Canales de Medios Pagados')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 565
        },
        "id": "Mkq2xcxd9yO6",
        "outputId": "3efb43c5-7bee-4c19-dc05-15132b2c0b54"
      },
      "execution_count": 137,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.xlabel('Canales')\n",
        "plt.ylabel('Presupuesto Asignado')\n",
        "plt.title('Asignación de Presupuesto entre Canales de Medios Pagados')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "id": "AzTvToB69ySm",
        "outputId": "afa76937-49f3-4b02-d279-9391fd796030"
      },
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Asignación de Presupuesto entre Canales de Medios Pagados')"
            ]
          },
          "metadata": {},
          "execution_count": 135
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "eUHiQ7lV9yV6"
      },
      "execution_count": 153,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "seasonality = pd.read_csv('seasonality.csv')\n",
        "print(seasonality.head())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KGDq4-5l-98T",
        "outputId": "3b625ad9-83d4-4ddd-f29a-4cad215f668c"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     date  sessions  conversion_rate\n",
            "0  1/1/18      8713           0.0049\n",
            "1  1/2/18     12188           0.0051\n",
            "2  1/3/18     12119           0.0078\n",
            "3  1/4/18     12075           0.0055\n",
            "4  1/5/18     13694           0.0113\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(seasonality_data.info())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 148
        },
        "id": "YsTS0VxH9yYS",
        "outputId": "8604e483-57e5-4eee-a64f-00595d1f994a"
      },
      "execution_count": 155,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'seasonality_data' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-155-9ef565fa6cd5>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mseasonality_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'seasonality_data' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "3AGgLByi-cyJ"
      },
      "execution_count": 141,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_Ox_8kGF-c1Z"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}